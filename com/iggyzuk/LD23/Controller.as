package com.iggyzuk.LD23 {	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.BitmapDataChannel;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.net.SharedObject;	import flash.geom.Matrix;	import com.iggyzuk.components.FrameRater;		/**	 * ...	 * @author Ignatus Zuk	 */	public class Controller {				public static var gamePaused:Boolean = false;		public static var debug:Boolean = false;		public static var turbo:Boolean = false;		public static var level:Level = null;				//Layers		public static var stage:Stage;		public static var bitmapClip:Sprite;		public static var content:Sprite;				public static var gameBitmap:Bitmap;		public static var gameBitmapData:BitmapData;				//Keys that toggle		public static var restartKey:Boolean = false;		public static var pauseKey:Boolean = false;		public static var debugKey:Boolean = false;		public static var turboKey:Boolean = false;		public static var muteKey:Boolean = false;		public static var actionKey:Boolean = false;		public static var mouseDown:Boolean = false;				public static var zoom:Number = 0.5;				//Set Map		public static var faction:int;		public static var factions:int;		public static var radius:int;		public static var edges:int;				public static function init():void {						stage = GameController.stage;						Input.setup();						stage.addEventListener(Event.ENTER_FRAME, loop);		}				public static function addCanvas():void {			content = new Sprite;						GameController.timeline.addChildAt(bitmapClip = new Sprite, 0);						gameBitmapData = new BitmapData(400, 300, false, 0x000000);			gameBitmap = new Bitmap(gameBitmapData);			gameBitmap.smoothing = false;			gameBitmap.scaleX = gameBitmap.scaleY = 2;						bitmapClip.addChildAt(gameBitmap, 0);						/*var fps:FrameRater = new FrameRater(0xFFFFFF,true);			stage.addChild(fps);*/		}				public static function setLevel(_faction, _factions, _radius, _edges):void {			faction = _faction;			factions = (_factions > 3) ? 3 : _factions;			radius = (_radius > 800) ? 800 : _radius; 			edges = (_edges > 360) ? 360 : (_edges < 4) ? 4: _edges; 						trace("Factions: " + factions);		}				public static function startGame():void {			init();			addCanvas();			restart();		}				//Main loop function		public static function loop(e:Event):void {						keyUpdates(); // key updates						if (level == null) return;						for (var i:int = 0; i < (turbo ? 4 : 1); i++) level.update(); // Main level update					stage.focus = stage; // Stage focus						//Draw game on a bitmap			if(!gamePaused){				gameBitmapData.lock();				gameBitmapData.fillRect(gameBitmapData.rect, 0x492074);				gameBitmapData.draw(content, 									new Matrix	(													zoom, 													0, 													0, 													zoom, 													0,													0												)									);				//gameBitmapData.draw(level.hudClip, new Matrix(0.5,0,0,0.5));				gameBitmapData.unlock();			}		}				//Key update function		public static function keyUpdates():void {						//Pause			if(Input.isKeyDown(Input.P)){				if(!pauseKey){					pauseToggle();				}				pauseKey = true;			} else {				pauseKey = false;			}						//Restart			if(Input.isKeyDown(Input.R)){				if(!restartKey){					GameController.transition.playTween(function() { restart(); } );				}				restartKey = true;			} else {				restartKey = false;			}						//Debug			if(Input.isKeyDown(Input.Z)){				if(!debugKey){					//debugToggle();				}				debugKey = true;			} else {				debugKey = false;			}						//Turbo			if(Input.isKeyDown(Input.SPACE)){				if(!turboKey){					turboToggle();				}				turboKey = true;			} else {				turboKey = false;			}						//Mute			if(Input.isKeyDown(Input.M)){				if(!muteKey){					muteToggle();				}				muteKey = true;			} else {				muteKey = false;			}						//Mute			if(Input.isKeyDown(Input.Q)){				GameController.transition.playTween(function() {										GameController.timeline.gotoAndStop("Menu");					level.destroy();					level = null;										GameController.timeline.removeChild(bitmapClip);					stage.removeEventListener(Event.ENTER_FRAME, loop);										GameController.stopAllSounds();					GameController.playMusic("GameMusic");				});			}		}				//Restart game		public static function restart():void {						trace(" --- RESTART GAME --- ");						GameController.stopAllSounds();						if(level != null){				level.destroy();				level = null;			}						//And Finally new level!			level = new Level();			level.create();		}				//Pause toggle		public static function pauseToggle():void {			if (!gamePaused) gamePaused = true;			else gamePaused = false;		}				//Debug toggle		public static function debugToggle():void {			if(!debug) debug = true;			else debug = false;		}				//Turbo toggle		public static function turboToggle():void {			if(!turbo) turbo = true;			else turbo = false;		}				//Mute toggle		public static function muteToggle():void {			if (!GameController.mute) {				GameController.mute = true;				GameController.setMusicVolume(0);			} else {				GameController.mute = false;				GameController.setMusicVolume(GameController.musicVolume);			}		}				public static function hexToRGB(hex:Number):Object {			var rgbObj:Object = {				red: ((hex & 0xFF0000) >> 16),				green: ((hex & 0x00FF00) >> 8),				blue: ((hex & 0x0000FF))			};			 			return rgbObj;		}	}}